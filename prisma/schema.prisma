// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ID
  userId    String   @unique // Clerk Auth ID - 이 아이디로 Clerk에서 유저를 식별
  username  String   @unique
  name      String
  image     String
  bio       String
  onboarded Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  threads Thread[]

  // MongoDB에서 Many-to-Many 관계 표현
  // https://pris.ly/d/document-database-many-to-many
  communities  Community[] @relation(fields: [communityIds], references: [id])
  communityIds String[]    @db.ObjectId
}

model Thread {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ID
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId

  // 순환 참조 관계
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#one-to-many-self-relations
  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-actions/special-rules-for-referential-actions
  parentThread   Thread?  @relation("ParentThread", fields: [parentThreadId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentThreadId String?  @db.ObjectId //? 댓글의 경우 부모 Thread의 ID, 대댓글의 경우 부모 댓글의 ID
  children       Thread[] @relation("ParentThread")

  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?    @db.ObjectId
}

model Community {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ID
  username  String   @unique
  name      String
  image     String
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  threads   Thread[]
  members   User[]   @relation(fields: [memberIds], references: [id])
  memberIds String[] @db.ObjectId
}
